pipeline {
    agent {
        node {
            label 'maven'
        }
    }
    stages {
        stage('拉取代码') {
            agent none
            steps {
                container('maven') {
                    git(url: 'https://gitee.com/Awaion/tools.git', credentialsId: 'gitee-account', branch: 'master', changelog: true, poll: false)
                    sh 'ls -al'
                    sh 'ls -al demo002'
                }

            }
        }

        stage('项目编译') {
            agent none
            steps {
                container('maven') {
                    sh 'ls -al demo002'
                    sh 'mvn clean package -f demo002/pom.xml -Dmaven.test.skip=true'
                    sh 'ls -al demo002/target'
                }

            }
        }

        stage('构建镜像') {
            parallel {
                stage('构建demo002镜像') {
                    agent none
                    steps {
                        container('maven') {
                            sh 'ls -al demo002/target'
                            sh 'docker build -t demo002:latest -f demo002/Dockerfile demo002'
                        }
                    }
                }
            }
        }

        stage('推送镜像') {
            parallel {
                stage('推送demo002镜像') {
                    agent none
                    steps {
                        container('maven') {
                            withCredentials([usernamePassword(credentialsId : 'aliyun-docker-account' ,usernameVariable : 'DOCKER_USER_VAR' ,passwordVariable : 'DOCKER_PWD_VAR' ,)]) {
                                sh 'echo "$DOCKER_PWD_VAR" | docker login $REGISTRY -u "$DOCKER_USER_VAR" --password-stdin'
                                sh 'docker tag demo002:latest $REGISTRY/$DOCKERHUB_NAMESPACE/demo002:SNAPSHOT-$BUILD_NUMBER'
                                sh 'docker push $REGISTRY/$DOCKERHUB_NAMESPACE/demo002:SNAPSHOT-$BUILD_NUMBER'
                            }
                        }
                    }
                }
            }
        }

        stage('部署') {
            parallel {
                stage('部署demo002') {
                    agent none
                    steps {
                        container('maven') {
                            withCredentials([kubeconfigFile(credentialsId : 'demo-kubeconfig' ,variable : 'KUBECONFIG' ,)]) {
                                sh 'envsubst < demo002/deploy/deploy.yml | kubectl apply -f -'
                            }
                        }
                    }
                }
            }
        }

        //1、配置全系统的邮件：                   全系统的监控
        //2、修改ks-jenkins的配置，里面的邮件；   流水线发邮件
        stage('发送确认邮件') {
            agent none
            steps {
//                 mail(to: '1191831992@qq.com', cc: '', subject: 'dev发布成功', body: "构建成功了  $BUILD_NUMBER")
                emailext (to: '1191831992@qq.com', subject: 'dev发布成功', body: "构建成功了  $BUILD_NUMBER")
            }
        }


    }
    environment {
        KUBECONFIG_CREDENTIAL_ID = 'demo-kubeconfig'
        REGISTRY = 'registry.cn-hangzhou.aliyuncs.com'
        DOCKERHUB_NAMESPACE = 'awaion'

        DOCKER_CREDENTIAL_ID = 'dockerhub-id'
        GITHUB_CREDENTIAL_ID = 'github-id'
        KUBECONFIG_CREDENTIAL_ID = 'demo-kubeconfig'
        REGISTRY = 'docker.io'
        DOCKERHUB_NAMESPACE = 'docker_username'
        GITHUB_ACCOUNT = 'kubesphere'
        APP_NAME = 'devops-java-sample'
    }
    parameters {
        string(name: 'TAG_NAME', defaultValue: '', description: '')
    }
}